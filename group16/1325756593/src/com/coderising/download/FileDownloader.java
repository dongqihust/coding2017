package com.coderising.download;

import com.coderising.download.api.Connection;
import com.coderising.download.api.ConnectionException;
import com.coderising.download.api.ConnectionManager;
import com.coderising.download.api.DownloadListener;


public class FileDownloader {
	
	String url;
	
	DownloadListener listener;
	
	ConnectionManager cm;
	

	public FileDownloader(String _url) {
		this.url = _url;
		
	}
	
	public void execute(){
		// 在这里实现你的代码， 注意： 需要用多线程实现下载
		// 这个类依赖于其他几个接口, 你需要写这几个接口的实现代码
		// (1) ConnectionManager , 可以打开一个连接，通过Connection可以读取其中的一段（用startPos, endPos来指定）
		// (2) DownloadListener, 由于是多线程下载， 调用这个类的客户端不知道什么时候结束，所以你需要实现当所有
		//     线程都执行完以后， 调用listener的notifiedFinished方法， 这样客户端就能收到通知。
		// 具体的实现思路：
		// 1. 需要调用ConnectionManager的open方法打开连接， 然后通过Connection.getContentLength方法获得文件的长度
		// 2. 至少启动3个线程下载，  注意每个线程需要先调用ConnectionManager的open方法
		// 然后调用read方法， read方法中有读取文件的开始位置和结束位置的参数， 返回值是byte[]数组
		// 3. 把byte数组写入到文件中
		// 4. 所有的线程都下载完成以后， 需要调用listener的notifiedFinished方法
		
		// 下面的代码是示例代码， 也就是说只有一个线程， 你需要改造成多线程的。
		Connection conn1 = null;
		Connection conn2 = null;
		Connection conn3 = null;
		DownloadThread t1 = null;
		DownloadThread t2=null;
		DownloadThread t3=null;
		try {
			
			conn1= cm.open(this.url);
			conn2 = cm.open(this.url);
			conn3= cm.open(this.url);
			int length = conn1.getContentLength();	
			
			 	   
			 t1 =   new DownloadThread(conn1,0,length/3);		
			 t2 =  new DownloadThread(conn2,length/3,2*length/3);
			 t3=   new DownloadThread(conn3,2*length/3,length);
			t1.start();
			t2.start();
			t3.start();
			
		} catch (ConnectionException e) {			
			e.printStackTrace();
		}finally{
			if(conn1 != null){
				conn1.close();			
			}
			if(conn3 != null){
				conn3.close();
			}
			if(conn2 != null){
				conn2.close();
			}
			
		}
		while(t1.hasFinished&&t2.hasFinished&&t3.hasFinished){
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			listener.notifyFinished();
		}
		
		
		
		
	}
	
	public void setListener(DownloadListener listener) {
		this.listener = listener;
	}

	
	
	public void setConnectionManager(ConnectionManager ucm){
		this.cm = ucm;
	}
	
	public DownloadListener getListener(){
		return this.listener;
	}
	
}